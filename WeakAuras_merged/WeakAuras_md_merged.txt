# Merged MD files from WeakAuras
# Generated on: 2025-10-16T01:11:04.839Z
# Total files: 8


================================================================================
FILE: WeakAuras/CHANGELOG.md
================================================================================

# [5.20.5](https://github.com/WeakAuras/WeakAuras2/tree/5.20.5) (2025-10-09)

[Full Changelog](https://github.com/WeakAuras/WeakAuras2/compare/5.20.4...5.20.5)

## Highlights



## Commits

InfusOnWoW (13):

- Update Discord List
- BT2: Make the spell id tooltip in the options clickable
- Conditions: Tweak handling of custom function
- Totem trigger: Add spellId check and use slot information from event
- Boss Mod Count Conditions: Use same cron syntax as for the trigger
- Conditions: Properly escape string checks to support [].
- Update Atlas File List from wago.tools
- Update Discord List
- CLEU: Replace combobox with one entry with a disabled checkbox
- Fix inserting links into the display text boxes
- Fix regression for textured Ticks
- Revert "Revert "Fix KR/TW/CN large number formatting for >= 100.000.000""
- Update Discord List

Stanzilla (5):

- chore: update retail toc for 11.2.5
- Update WeakAurasModelPaths from wago.tools
- Update WeakAurasModelPaths from wago.tools
- Update WeakAurasModelPaths from wago.tools
- Update WeakAurasModelPaths from wago.tools

Veldt (1):

- Add Bleak Arrows to reset_ranged_swing_spells

dependabot[bot] (1):

- Bump leafo/gh-actions-lua from 11 to 12

mrbuds (2):

- Function for checking if we are on a Hardcore server doesn't exists on Retail
- Scary warning on import on Hardcore server




================================================================================
FILE: WeakAuras/CODE_OF_CONDUCT.md
================================================================================

# Contributor Covenant Code of Conduct

## Our Pledge

In the interest of fostering an open and welcoming environment, we as
contributors and maintainers pledge to making participation in our project and
our community a harassment-free experience for everyone, regardless of age, body
size, disability, ethnicity, sex characteristics, gender identity and expression,
level of experience, education, socio-economic status, nationality, personal
appearance, race, religion, or sexual identity and orientation.

## Our Standards

Examples of behavior that contributes to creating a positive environment
include:

* Using welcoming and inclusive language
* Being respectful of differing viewpoints and experiences
* Gracefully accepting constructive criticism
* Focusing on what is best for the community
* Showing empathy towards other community members

Examples of unacceptable behavior by participants include:

* The use of sexualized language or imagery and unwelcome sexual attention or
 advances
* Trolling, insulting/derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or electronic
 address, without explicit permission
* Other conduct which could reasonably be considered inappropriate in a
 professional setting

## Our Responsibilities

Project maintainers are responsible for clarifying the standards of acceptable
behavior and are expected to take appropriate and fair corrective action in
response to any instances of unacceptable behavior.

Project maintainers have the right and responsibility to remove, edit, or
reject comments, commits, code, wiki edits, issues, and other contributions
that are not aligned to this Code of Conduct, or to ban temporarily or
permanently any contributor for other behaviors that they deem inappropriate,
threatening, offensive, or harmful.

## Scope

This Code of Conduct applies both within project spaces and in public spaces
when an individual is representing the project or its community. Examples of
representing a project or community include using an official project e-mail
address, posting via an official social media account, or acting as an appointed
representative at an online or offline event. Representation of a project may be
further defined and clarified by project maintainers.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported by contacting the project team at staneck@gmail.com. All
complaints will be reviewed and investigated and will result in a response that
is deemed necessary and appropriate to the circumstances. The project team is
obligated to maintain confidentiality with regard to the reporter of an incident.
Further details of specific enforcement policies may be posted separately.

Project maintainers who do not follow or enforce the Code of Conduct in good
faith may face temporary or permanent repercussions as determined by other
members of the project's leadership.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,
available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see
https://www.contributor-covenant.org/faq



================================================================================
FILE: WeakAuras/Libs/Archivist/LICENSE.md
================================================================================

# CC0 1.0 Universal

CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED HEREUNDER.

## Statement of Purpose

The laws of most jurisdictions throughout the world automatically confer exclusive Copyright and Related Rights (defined below) upon the creator and subsequent owner(s) (each and all, an "owner") of an original work of authorship and/or a database (each, a "Work").

Certain owners wish to permanently relinquish those rights to a Work for the purpose of contributing to a commons of creative, cultural and scientific works ("Commons") that the public can reliably and without fear of later claims of infringement build upon, modify, incorporate in other works, reuse and redistribute as freely as possible in any form whatsoever and for any purposes, including without limitation commercial purposes. These owners may contribute to the Commons to promote the ideal of a free culture and the further production of creative, cultural and scientific works, or to gain reputation or greater distribution for their Work in part through the use and efforts of others.

For these and/or other purposes and motivations, and without any expectation of additional consideration or compensation, the person associating CC0 with a Work (the "Affirmer"), to the extent that he or she is an owner of Copyright and Related Rights in the Work, voluntarily elects to apply CC0 to the Work and publicly distribute the Work under its terms, with knowledge of his or her Copyright and Related Rights in the Work and the meaning and intended legal effect of CC0 on those rights.

1. __Copyright and Related Rights.__ A Work made available under CC0 may be protected by copyright and related or neighboring rights ("Copyright and Related Rights"). Copyright and Related Rights include, but are not limited to, the following:

    i. the right to reproduce, adapt, distribute, perform, display, communicate, and translate a Work;

    ii. moral rights retained by the original author(s) and/or performer(s);

    iii. publicity and privacy rights pertaining to a person's image or likeness depicted in a Work;

    iv. rights protecting against unfair competition in regards to a Work, subject to the limitations in paragraph 4(a), below;

    v. rights protecting the extraction, dissemination, use and reuse of data in a Work;

    vi. database rights (such as those arising under Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, and under any national implementation thereof, including any amended or successor version of such directive); and

    vii. other similar, equivalent or corresponding rights throughout the world based on applicable law or treaty, and any national implementations thereof.

2. __Waiver.__ To the greatest extent permitted by, but not in contravention of, applicable law, Affirmer hereby overtly, fully, permanently, irrevocably and unconditionally waives, abandons, and surrenders all of Affirmer's Copyright and Related Rights and associated claims and causes of action, whether now known or unknown (including existing as well as future claims and causes of action), in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each member of the public at large and to the detriment of Affirmer's heirs and successors, fully intending that such Waiver shall not be subject to revocation, rescission, cancellation, termination, or any other legal or equitable action to disrupt the quiet enjoyment of the Work by the public as contemplated by Affirmer's express Statement of Purpose.

3. __Public License Fallback.__ Should any part of the Waiver for any reason be judged legally invalid or ineffective under applicable law, then the Waiver shall be preserved to the maximum extent permitted taking into account Affirmer's express Statement of Purpose. In addition, to the extent the Waiver is so judged Affirmer hereby grants to each affected person a royalty-free, non transferable, non sublicensable, non exclusive, irrevocable and unconditional license to exercise Affirmer's Copyright and Related Rights in the Work (i) in all territories worldwide, (ii) for the maximum duration provided by applicable law or treaty (including future time extensions), (iii) in any current or future medium and for any number of copies, and (iv) for any purpose whatsoever, including without limitation commercial, advertising or promotional purposes (the "License"). The License shall be deemed effective as of the date CC0 was applied by Affirmer to the Work. Should any part of the License for any reason be judged legally invalid or ineffective under applicable law, such partial invalidity or ineffectiveness shall not invalidate the remainder of the License, and in such case Affirmer hereby affirms that he or she will not (i) exercise any of his or her remaining Copyright and Related Rights in the Work or (ii) assert any associated claims and causes of action with respect to the Work, in either case contrary to Affirmer's express Statement of Purpose.

4. __Limitations and Disclaimers.__

    a. No trademark or patent rights held by Affirmer are waived, abandoned, surrendered, licensed or otherwise affected by this document.

    b. Affirmer offers the Work as-is and makes no representations or warranties of any kind concerning the Work, express, implied, statutory or otherwise, including without limitation warranties of title, merchantability, fitness for a particular purpose, non infringement, or the absence of latent or other defects, accuracy, or the present or absence of errors, whether or not discoverable, all to the greatest extent permissible under applicable law.

    c. Affirmer disclaims responsibility for clearing rights of other persons that may apply to the Work or any use thereof, including without limitation any person's Copyright and Related Rights in the Work. Further, Affirmer disclaims responsibility for obtaining any necessary consents, permissions or other rights required for any use of the Work.

    d. Affirmer understands and acknowledges that Creative Commons is not a party to this document and has no duty or obligation with respect to this CC0 or use of the Work.



================================================================================
FILE: WeakAuras/Libs/Chomp/README.md
================================================================================

Chomp Message Library
=====================
The Chomp Message Library is a more-advanced and more-complex rewrite of the older (still maintained) ChatThrottleLib by mikk. The primary features that separate Chomp from CTL are the inclusion of Battle.net messaging functions and throttling, and advanced prefix handling and message splitting.

The Battle.net features are a logical extension of ChatThrottleLib's current capabilities, however the advanced prefix handling and message splitting for addon messages move significantly away from ChatThrottleLib's narrower, lightweight scope.

Including Chomp in Your AddOn
=============================
Embedding Chomp in your addon is supported, so long as your addon is not a LoadOnDemand addon. Chomp *must* be loaded prior to the PLAYER_LOGIN event firing, for safe handling of messages. Including Chomp in your loader addon is the preferred method of handling things, if you have to use LoadOnDemand.

To include Chomp, please add an entry for "Chomp\Chomp.xml" (note the file extension) to your addon's .toc file, with the proper extra path for where your addon keeps copies of libraries. Chomp is *not* guaranteed to always remain a single file of code.

Copyright and Permissions Notices
=================================
Copyright and permission notices are included in the headers of all substantial files. Files without copyright or permission notices are considered by the author to not meet the theshold of originality required for copyright, thus consisting solely of non-copyrightable material, and may be treated as such.

The year is *not* necessarily included in these copyright notices, as it is not required under the Berne Convention, and makes little sense for an author clearly identified by their legal name in a country where copyright term for an individual-authored work is limited based on the author's life. In the event of an author's death, the notices will be updated to reflect the year of death for that individual, assuming anyone is capable of doing so. Otherwise, obituaries and official records will need to be relied upon in the distant future.

In the cases of anonymous or pseudonymous contributions that cannot be tied to a legal name or a lifespan, the year of the contribution will be included in the notices for that particular author.



================================================================================
FILE: WeakAuras/Libs/LibCustomGlow-1.0/README.md
================================================================================

# LibCustomGlow

If you want to use LCG in your addon, please make sure to add it and `Masque` to your `OptionalDependencies` array in your TOC file.

Adds functions:

## Pixel Glow

- `PixelGlow_Start(frame[, color[, N[, frequency[, length[, th[, xOffset[, yOffset[, border[ ,key]]]]]]]])`

Starts glow over target frame with set parameters:

- `frame` - target frame to set glowing;
- `color` - {r,g,b,a}, color of lines and opacity, from 0 to 1. Default value is {0.95, 0.95, 0.32, 1};
- `N` - number of lines. Default value is 8;
- `frequency` - frequency, set to negative to inverse direction of rotation. Default value is 0.25;
- `length` - length of lines. Default value depends on region size and number of lines;
- `th` - thickness of lines. Default value is 2;
- `xOffset`,`yOffset` - offset of glow relative to region border;
- `border` - set to true to create border under lines;
- `key` - key of glow, allows for multiple glows on one frame;

---

- `PixelGlow_Stop(frame[, key])`

Stops glow with set key over target frame

## AutoCast Glow

- `AutoCastGlow_Start(frame[, color[, N[, frequency[, scale[, xOffset[, yOffset[, key]]]]]]])`

Starts glow over target frame with set parameters:

- `frame` - target frame to set glowing;
- `color` - {r,g,b,a}, color of particles and opacity, from 0 to 1. Default value is {0.95, 0.95, 0.32, 1};
- `N` - number of particle groups. Each group contains 4 particles. Default value is 4;
- `frequency` - frequency, set to negative to inverse direction of rotation. Default value is 0.125;
- `scale` - scale of particles;
- `xOffset`,`yOffset` - offset of glow relative to region border;
- `key` - key of glow, allows for multiple glows on one frame;

---

- `AutoCastGlow_Stop(frame[, key])`

Stops glow with set key over target frame

## ButtonGlow

Blizzard glow is based heavily on <https://www.wowace.com/projects/libbuttonglow-1-0>

- `ButtonGlow_Start(frame[, color[, frequency]]])`

Starts glow over target frame with set parameters:

- `frame` - target frame to set glowing;
- `color` - {r,g,b,a}, color of particles and opacity, from 0 to 1. Default value is {0.95, 0.95, 0.32, 1};
- `frequency` - frequency. Default value is 0.125;

---

- `ButtonGlow_Stop(frame)`

    Stops glow over target frame



================================================================================
FILE: WeakAuras/Libs/LibGetFrame-1.0/README.md
================================================================================

# LibGetFrame

Return unit frame for a given unit

## Usage

```Lua
local LGF = LibStub("LibGetFrame-1.0")
local frame = LGF.GetUnitFrame(unit , options)

local callback = function(event, frame, unit)
  if event == "GETFRAME_REFRESH" then
    -- cache was refreshed
  end
  if event == "FRAME_UNIT_UPDATE" then
    -- 'frame' was updated and is now a match for 'unit'
  end
  if event == "FRAME_UNIT_REMOVED" then
    -- 'frame' was updated and is no longer a match for 'unit'
  end
end

LGF.RegisterCallback("MyAddonName", "GETFRAME_REFRESH", callback)
LGF.RegisterCallback("MyAddonName", "FRAME_UNIT_UPDATE", callback)
LGF.RegisterCallback("MyAddonName", "FRAME_UNIT_REMOVED", callback)

```

## Public functions

```Lua
LGF:GetUnitFrame(unit, options)
```

Options:

- framePriorities : array

- ignorePlayerFrame : boolean (default true)
- ignoreTargetFrame : boolean (default true)
- ignoreTargettargetFrame : boolean (default true)
- ignorePartyFrame : boolean (default false)
- ignorePartyTargetFrame : boolean (default true)
- ignoreRaidFrame : boolean (default false)

- playerFrames : array
- targetFrames : array
- targettargetFrames : array
- partyFrames : array
- partyTargetFrames : array
- raidFrames : array
- ignoreFrames : array
- returnAll : boolean (default false)

If returnAll is false, GetUnitFrame will return a single best match

For arrays check LibGetFrame-1.0.lua code for defaults

```Lua
LGF:ScanForUnitFrames()
```

Ask lib to do a new scan of frames.

This scan can take a few frames to be completed.

You should not expect the cache use by LGF:GetUnitFrame to be updated in the same frame as this ScanForUnitFrames call.

Use lib's callbacks to know when the cache is refresh.

```Lua
LGF:GetUnitNameplate(unit)
```

Return health bar for a nameplate unit, works with a variety of addons


## Callbacks

```Lua
-- Fired after a scan complete and cache refreshed
LGF.RegisterCallback("MyAddonName", "GETFRAME_REFRESH", function(event) end)
```

```Lua
-- Fired when a frame is a new match for a unit (it does not test if it is the BEST match!)
LGF.RegisterCallback("MyAddonName", "FRAME_UNIT_UPDATE", function(event, frame, unit) end)
```

```Lua
-- Fired when a frame is not a new match for a unit anymore
LGF.RegisterCallback("MyAddonName", "FRAME_UNIT_REMOVED", function(event, frame, unit) end)
```

## Examples

### Glow player frame

```Lua
local LGF = LibStub("LibGetFrame-1.0")
local LCG = LibStub("LibCustomGlow-1.0")
local frame = LGF.GetUnitFrame("player")

if frame then
  LCG.ButtonGlow_Start(frame)
  -- LCG.ButtonGlow_Stop(frame)
end
```

### Glow every frames for your target

```Lua
local LGF = LibStub("LibGetFrame-1.0")
local LCG = LibStub("LibCustomGlow-1.0")

local frames = LGF.GetUnitFrame("target", {
  ignorePlayerFrame = false,
  ignoreTargetFrame = false,
  ignoreTargettargetFrame = false,
  returnAll = true,
})

for _, frame in pairs(frames) do
  LCG.ButtonGlow_Start(frame)
  --LCG.ButtonGlow_Stop(frame)
end
```

### Ignore Vuhdo panel 2 and 3

```Lua
local frame = LGF.GetUnitFrame("player", {
  ignoreFrames = { "Vd2.*", "Vd3.*" }
})
```

### Glow specific units and update glow when frames changes

```Lua
local LGF = LibStub("LibGetFrame-1.0")
local LCG = LibStub("LibCustomGlow-1.0")

-- list of units i want glowing
local glow_units = {
  player = true
}
-- track which frame is glowing per unit
local glow_unit_frames = {}

-- glow them using current cache
for unit in pairs(glow_units) do
  local frame = LGF.GetUnitFrame("player")
  if frame then
    LCG.ButtonGlow_Start(frame)
    glow_unit_frames[unit] = frame
  end
end

local callback = function(event, frame, unit)
  if not glow_units[unit] then
    return
  end
  -- new match for GetUnitFrame(unit), check if it's different from previous "best match" returned
  local new_best_match = LGF.GetUnitFrame(unit)
  if new_best_match == nil then
    -- didn't found a best match for this unit
    if glow_unit_frames[unit] then
      -- stop previous glow
      LCG.ButtonGlow_Stop(glow_unit_frames[unit])
      glow_unit_frames[unit] = nil
    end
  elseif new_best_match ~= glow_unit_frames[unit] then
    -- best match found, but different from previous one
    if glow_unit_frames[unit] then
      -- stop previous glow
      LCG.ButtonGlow_Stop(glow_unit_frames[unit])
    end
    LCG.ButtonGlow_Start(new_best_match)
    glow_unit_frames[unit] = new_best_match
  end
end

LGF.RegisterCallback("MyAddonName", "FRAME_UNIT_UPDATE", callback)
LGF.RegisterCallback("MyAddonName", "FRAME_UNIT_REMOVED", callback)
```

[GitHub Project](https://github.com/mrbuds/LibGetFrame)



================================================================================
FILE: WeakAuras/Libs/LibRangeCheck-3.0/README.md
================================================================================

# LibRangeCheck-3.0

A library to determine estimated range in World of Warcraft



================================================================================
FILE: WeakAuras/Libs/LibSpellRange-1.0/README.md
================================================================================

# LibSpellRange-1.0

## Background

Blizzard's `IsSpellInRange` API has always been very limited - you either must have the name of the spell, 
or its spell book ID. Checking directly by spellID is simply not possible. 
Now, since Mists of Pandaria, Blizzard changed the way that many talents and specialization spells work - 
instead of giving you a new spell when leaned, they replace existing spells. These replacement spells do 
not work with Blizzard's IsSpellInRange function whatsoever; this limitation is what prompted the creation of this lib.

## Usage

**LibSpellRange-1.0** exposes an enhanced version of IsSpellInRange that:

*   Allows ranged checking based on both spell name and spellID.
*   Works correctly with replacement spells that will not work using Blizzard's IsSpellInRange method alone.
*   Attempts to works with pet spells via the action bar API, which as of some indeterminate recent WoW version no longer work with IsSpellInRange.

### `SpellRange.IsSpellInRange(spell, unit)` - Improved `IsSpellInRange`

#### Parameters

- `spell` - Name or spellID of a spell that you wish to check the range of. The spell must be a spell that you have in your spellbook or your pet's spellbook.
- `unit` - UnitID of the spell that you wish to check the range on.

#### Return value

Exact same returns as [the built-in `IsSpellInRange`](http://wowprogramming.com/docs/api/IsSpellInRange.html)

#### Usage

``` lua
-- Check spell range by spell name on unit "target"
local SpellRange = LibStub("SpellRange-1.0")
local inRange = SpellRange.IsSpellInRange("Stormstrike", "target")

-- Check spell range by spellID on unit "mouseover"
local SpellRange = LibStub("SpellRange-1.0")
local inRange = SpellRange.IsSpellInRange(17364, "mouseover")
```

### `SpellRange.SpellHasRange(spell)` - Improved `SpellHasRange`

#### Parameters

- `spell` - Name or spellID of a spell that you wish to check for a range. The spell must be a spell that you have in your spellbook or your pet's spellbook.

#### Return value

Exact same returns as [the built-in `SpellHasRange`](http://wowprogramming.com/docs/api/SpellHasRange.html)

#### Usage

``` lua
-- Check if a spell has a range by spell name
local SpellRange = LibStub("SpellRange-1.0")
local hasRange = SpellRange.SpellHasRange("Stormstrike")

-- Check if a spell has a range by spellID
local SpellRange = LibStub("SpellRange-1.0")
local hasRange = SpellRange.SpellHasRange(17364)
```


